// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Tuto7Payload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Tuto7Payload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Tuto7PayloadProto {

namespace {

const ::google::protobuf::Descriptor* Digi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Digi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DigiPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DigiPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* HitPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HitPayload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Tuto7Payload_2eproto() {
  protobuf_AddDesc_Tuto7Payload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Tuto7Payload.proto");
  GOOGLE_CHECK(file != NULL);
  Digi_descriptor_ = file->message_type(0);
  static const int Digi_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, time_stamperror_),
  };
  Digi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Digi_descriptor_,
      Digi::default_instance_,
      Digi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Digi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Digi));
  Hit_descriptor_ = file->message_type(1);
  static const int Hit_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, det_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, mcindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, posz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, dposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, dposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, dposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, time_stamperror_),
  };
  Hit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hit_descriptor_,
      Hit::default_instance_,
      Hit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hit));
  DigiPayload_descriptor_ = file->message_type(2);
  static const int DigiPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigiPayload, digi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigiPayload, bigbuffer_),
  };
  DigiPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DigiPayload_descriptor_,
      DigiPayload::default_instance_,
      DigiPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigiPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigiPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DigiPayload));
  HitPayload_descriptor_ = file->message_type(3);
  static const int HitPayload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitPayload, hit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitPayload, bigbuffer_),
  };
  HitPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HitPayload_descriptor_,
      HitPayload::default_instance_,
      HitPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HitPayload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HitPayload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Tuto7Payload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Digi_descriptor_, &Digi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hit_descriptor_, &Hit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DigiPayload_descriptor_, &DigiPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HitPayload_descriptor_, &HitPayload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Tuto7Payload_2eproto() {
  delete Digi::default_instance_;
  delete Digi_reflection_;
  delete Hit::default_instance_;
  delete Hit_reflection_;
  delete DigiPayload::default_instance_;
  delete DigiPayload_reflection_;
  delete HitPayload::default_instance_;
  delete HitPayload_reflection_;
}

void protobuf_AddDesc_Tuto7Payload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022Tuto7Payload.proto\022\021Tuto7PayloadProto\""
    "T\n\004Digi\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\t\n\001z\030\003 \001(\005"
    "\022\022\n\ntime_stamp\030\004 \001(\001\022\027\n\017time_stamperror\030"
    "\005 \001(\001\"\252\001\n\003Hit\022\016\n\006det_id\030\001 \001(\005\022\017\n\007mcindex"
    "\030\002 \001(\005\022\014\n\004posx\030\003 \001(\001\022\014\n\004posy\030\004 \001(\001\022\014\n\004po"
    "sz\030\005 \001(\001\022\r\n\005dposx\030\006 \001(\001\022\r\n\005dposy\030\007 \001(\001\022\r"
    "\n\005dposz\030\010 \001(\001\022\022\n\ntime_stamp\030\t \001(\001\022\027\n\017tim"
    "e_stamperror\030\n \001(\001\"G\n\013DigiPayload\022%\n\004dig"
    "i\030\001 \003(\0132\027.Tuto7PayloadProto.Digi\022\021\n\tbigB"
    "uffer\030\002 \001(\014\"D\n\nHitPayload\022#\n\003hit\030\001 \003(\0132\026"
    ".Tuto7PayloadProto.Hit\022\021\n\tbigBuffer\030\002 \001("
    "\014", 441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Tuto7Payload.proto", &protobuf_RegisterTypes);
  Digi::default_instance_ = new Digi();
  Hit::default_instance_ = new Hit();
  DigiPayload::default_instance_ = new DigiPayload();
  HitPayload::default_instance_ = new HitPayload();
  Digi::default_instance_->InitAsDefaultInstance();
  Hit::default_instance_->InitAsDefaultInstance();
  DigiPayload::default_instance_->InitAsDefaultInstance();
  HitPayload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Tuto7Payload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Tuto7Payload_2eproto {
  StaticDescriptorInitializer_Tuto7Payload_2eproto() {
    protobuf_AddDesc_Tuto7Payload_2eproto();
  }
} static_descriptor_initializer_Tuto7Payload_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Digi::kXFieldNumber;
const int Digi::kYFieldNumber;
const int Digi::kZFieldNumber;
const int Digi::kTimeStampFieldNumber;
const int Digi::kTimeStamperrorFieldNumber;
#endif  // !_MSC_VER

Digi::Digi()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tuto7PayloadProto.Digi)
}

void Digi::InitAsDefaultInstance() {
}

Digi::Digi(const Digi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tuto7PayloadProto.Digi)
}

void Digi::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  time_stamp_ = 0;
  time_stamperror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Digi::~Digi() {
  // @@protoc_insertion_point(destructor:Tuto7PayloadProto.Digi)
  SharedDtor();
}

void Digi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Digi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Digi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Digi_descriptor_;
}

const Digi& Digi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tuto7Payload_2eproto();
  return *default_instance_;
}

Digi* Digi::default_instance_ = NULL;

Digi* Digi::New() const {
  return new Digi;
}

void Digi::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Digi*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Digi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tuto7PayloadProto.Digi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_z;
        break;
      }

      // optional int32 z = 3;
      case 3: {
        if (tag == 24) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_time_stamp;
        break;
      }

      // optional double time_stamp = 4;
      case 4: {
        if (tag == 33) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_time_stamperror;
        break;
      }

      // optional double time_stamperror = 5;
      case 5: {
        if (tag == 41) {
         parse_time_stamperror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamperror_)));
          set_has_time_stamperror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tuto7PayloadProto.Digi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tuto7PayloadProto.Digi)
  return false;
#undef DO_
}

void Digi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tuto7PayloadProto.Digi)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->z(), output);
  }

  // optional double time_stamp = 4;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->time_stamp(), output);
  }

  // optional double time_stamperror = 5;
  if (has_time_stamperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->time_stamperror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tuto7PayloadProto.Digi)
}

::google::protobuf::uint8* Digi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tuto7PayloadProto.Digi)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional int32 z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->z(), target);
  }

  // optional double time_stamp = 4;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->time_stamp(), target);
  }

  // optional double time_stamperror = 5;
  if (has_time_stamperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->time_stamperror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tuto7PayloadProto.Digi)
  return target;
}

int Digi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 3;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

    // optional double time_stamp = 4;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional double time_stamperror = 5;
    if (has_time_stamperror()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Digi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Digi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Digi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Digi::MergeFrom(const Digi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_time_stamperror()) {
      set_time_stamperror(from.time_stamperror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Digi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Digi::CopyFrom(const Digi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Digi::IsInitialized() const {

  return true;
}

void Digi::Swap(Digi* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(time_stamperror_, other->time_stamperror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Digi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Digi_descriptor_;
  metadata.reflection = Digi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hit::kDetIdFieldNumber;
const int Hit::kMcindexFieldNumber;
const int Hit::kPosxFieldNumber;
const int Hit::kPosyFieldNumber;
const int Hit::kPoszFieldNumber;
const int Hit::kDposxFieldNumber;
const int Hit::kDposyFieldNumber;
const int Hit::kDposzFieldNumber;
const int Hit::kTimeStampFieldNumber;
const int Hit::kTimeStamperrorFieldNumber;
#endif  // !_MSC_VER

Hit::Hit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tuto7PayloadProto.Hit)
}

void Hit::InitAsDefaultInstance() {
}

Hit::Hit(const Hit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tuto7PayloadProto.Hit)
}

void Hit::SharedCtor() {
  _cached_size_ = 0;
  det_id_ = 0;
  mcindex_ = 0;
  posx_ = 0;
  posy_ = 0;
  posz_ = 0;
  dposx_ = 0;
  dposy_ = 0;
  dposz_ = 0;
  time_stamp_ = 0;
  time_stamperror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hit::~Hit() {
  // @@protoc_insertion_point(destructor:Tuto7PayloadProto.Hit)
  SharedDtor();
}

void Hit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hit_descriptor_;
}

const Hit& Hit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tuto7Payload_2eproto();
  return *default_instance_;
}

Hit* Hit::default_instance_ = NULL;

Hit* Hit::New() const {
  return new Hit;
}

void Hit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Hit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(det_id_, dposz_);
  }
  ZR_(time_stamp_, time_stamperror_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tuto7PayloadProto.Hit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 det_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &det_id_)));
          set_has_det_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mcindex;
        break;
      }

      // optional int32 mcindex = 2;
      case 2: {
        if (tag == 16) {
         parse_mcindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mcindex_)));
          set_has_mcindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_posx;
        break;
      }

      // optional double posx = 3;
      case 3: {
        if (tag == 25) {
         parse_posx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_posy;
        break;
      }

      // optional double posy = 4;
      case 4: {
        if (tag == 33) {
         parse_posy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_posz;
        break;
      }

      // optional double posz = 5;
      case 5: {
        if (tag == 41) {
         parse_posz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &posz_)));
          set_has_posz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_dposx;
        break;
      }

      // optional double dposx = 6;
      case 6: {
        if (tag == 49) {
         parse_dposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dposx_)));
          set_has_dposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_dposy;
        break;
      }

      // optional double dposy = 7;
      case 7: {
        if (tag == 57) {
         parse_dposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dposy_)));
          set_has_dposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_dposz;
        break;
      }

      // optional double dposz = 8;
      case 8: {
        if (tag == 65) {
         parse_dposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dposz_)));
          set_has_dposz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_time_stamp;
        break;
      }

      // optional double time_stamp = 9;
      case 9: {
        if (tag == 73) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_time_stamperror;
        break;
      }

      // optional double time_stamperror = 10;
      case 10: {
        if (tag == 81) {
         parse_time_stamperror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamperror_)));
          set_has_time_stamperror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tuto7PayloadProto.Hit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tuto7PayloadProto.Hit)
  return false;
#undef DO_
}

void Hit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tuto7PayloadProto.Hit)
  // optional int32 det_id = 1;
  if (has_det_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->det_id(), output);
  }

  // optional int32 mcindex = 2;
  if (has_mcindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mcindex(), output);
  }

  // optional double posx = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->posx(), output);
  }

  // optional double posy = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->posy(), output);
  }

  // optional double posz = 5;
  if (has_posz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->posz(), output);
  }

  // optional double dposx = 6;
  if (has_dposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dposx(), output);
  }

  // optional double dposy = 7;
  if (has_dposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dposy(), output);
  }

  // optional double dposz = 8;
  if (has_dposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->dposz(), output);
  }

  // optional double time_stamp = 9;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->time_stamp(), output);
  }

  // optional double time_stamperror = 10;
  if (has_time_stamperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->time_stamperror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tuto7PayloadProto.Hit)
}

::google::protobuf::uint8* Hit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tuto7PayloadProto.Hit)
  // optional int32 det_id = 1;
  if (has_det_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->det_id(), target);
  }

  // optional int32 mcindex = 2;
  if (has_mcindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mcindex(), target);
  }

  // optional double posx = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->posx(), target);
  }

  // optional double posy = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->posy(), target);
  }

  // optional double posz = 5;
  if (has_posz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->posz(), target);
  }

  // optional double dposx = 6;
  if (has_dposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dposx(), target);
  }

  // optional double dposy = 7;
  if (has_dposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dposy(), target);
  }

  // optional double dposz = 8;
  if (has_dposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->dposz(), target);
  }

  // optional double time_stamp = 9;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->time_stamp(), target);
  }

  // optional double time_stamperror = 10;
  if (has_time_stamperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->time_stamperror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tuto7PayloadProto.Hit)
  return target;
}

int Hit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 det_id = 1;
    if (has_det_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->det_id());
    }

    // optional int32 mcindex = 2;
    if (has_mcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mcindex());
    }

    // optional double posx = 3;
    if (has_posx()) {
      total_size += 1 + 8;
    }

    // optional double posy = 4;
    if (has_posy()) {
      total_size += 1 + 8;
    }

    // optional double posz = 5;
    if (has_posz()) {
      total_size += 1 + 8;
    }

    // optional double dposx = 6;
    if (has_dposx()) {
      total_size += 1 + 8;
    }

    // optional double dposy = 7;
    if (has_dposy()) {
      total_size += 1 + 8;
    }

    // optional double dposz = 8;
    if (has_dposz()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double time_stamp = 9;
    if (has_time_stamp()) {
      total_size += 1 + 8;
    }

    // optional double time_stamperror = 10;
    if (has_time_stamperror()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hit::MergeFrom(const Hit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_det_id()) {
      set_det_id(from.det_id());
    }
    if (from.has_mcindex()) {
      set_mcindex(from.mcindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_posz()) {
      set_posz(from.posz());
    }
    if (from.has_dposx()) {
      set_dposx(from.dposx());
    }
    if (from.has_dposy()) {
      set_dposy(from.dposy());
    }
    if (from.has_dposz()) {
      set_dposz(from.dposz());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_time_stamperror()) {
      set_time_stamperror(from.time_stamperror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hit::CopyFrom(const Hit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hit::IsInitialized() const {

  return true;
}

void Hit::Swap(Hit* other) {
  if (other != this) {
    std::swap(det_id_, other->det_id_);
    std::swap(mcindex_, other->mcindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(posz_, other->posz_);
    std::swap(dposx_, other->dposx_);
    std::swap(dposy_, other->dposy_);
    std::swap(dposz_, other->dposz_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(time_stamperror_, other->time_stamperror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hit_descriptor_;
  metadata.reflection = Hit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DigiPayload::kDigiFieldNumber;
const int DigiPayload::kBigBufferFieldNumber;
#endif  // !_MSC_VER

DigiPayload::DigiPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tuto7PayloadProto.DigiPayload)
}

void DigiPayload::InitAsDefaultInstance() {
}

DigiPayload::DigiPayload(const DigiPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tuto7PayloadProto.DigiPayload)
}

void DigiPayload::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bigbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DigiPayload::~DigiPayload() {
  // @@protoc_insertion_point(destructor:Tuto7PayloadProto.DigiPayload)
  SharedDtor();
}

void DigiPayload::SharedDtor() {
  if (bigbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bigbuffer_;
  }
  if (this != default_instance_) {
  }
}

void DigiPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigiPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigiPayload_descriptor_;
}

const DigiPayload& DigiPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tuto7Payload_2eproto();
  return *default_instance_;
}

DigiPayload* DigiPayload::default_instance_ = NULL;

DigiPayload* DigiPayload::New() const {
  return new DigiPayload;
}

void DigiPayload::Clear() {
  if (has_bigbuffer()) {
    if (bigbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      bigbuffer_->clear();
    }
  }
  digi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DigiPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tuto7PayloadProto.DigiPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Tuto7PayloadProto.Digi digi = 1;
      case 1: {
        if (tag == 10) {
         parse_digi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_digi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_digi;
        if (input->ExpectTag(18)) goto parse_bigBuffer;
        break;
      }

      // optional bytes bigBuffer = 2;
      case 2: {
        if (tag == 18) {
         parse_bigBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bigbuffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tuto7PayloadProto.DigiPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tuto7PayloadProto.DigiPayload)
  return false;
#undef DO_
}

void DigiPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tuto7PayloadProto.DigiPayload)
  // repeated .Tuto7PayloadProto.Digi digi = 1;
  for (int i = 0; i < this->digi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->digi(i), output);
  }

  // optional bytes bigBuffer = 2;
  if (has_bigbuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bigbuffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tuto7PayloadProto.DigiPayload)
}

::google::protobuf::uint8* DigiPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tuto7PayloadProto.DigiPayload)
  // repeated .Tuto7PayloadProto.Digi digi = 1;
  for (int i = 0; i < this->digi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->digi(i), target);
  }

  // optional bytes bigBuffer = 2;
  if (has_bigbuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bigbuffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tuto7PayloadProto.DigiPayload)
  return target;
}

int DigiPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes bigBuffer = 2;
    if (has_bigbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bigbuffer());
    }

  }
  // repeated .Tuto7PayloadProto.Digi digi = 1;
  total_size += 1 * this->digi_size();
  for (int i = 0; i < this->digi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->digi(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigiPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DigiPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DigiPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DigiPayload::MergeFrom(const DigiPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  digi_.MergeFrom(from.digi_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bigbuffer()) {
      set_bigbuffer(from.bigbuffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DigiPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigiPayload::CopyFrom(const DigiPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigiPayload::IsInitialized() const {

  return true;
}

void DigiPayload::Swap(DigiPayload* other) {
  if (other != this) {
    digi_.Swap(&other->digi_);
    std::swap(bigbuffer_, other->bigbuffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DigiPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DigiPayload_descriptor_;
  metadata.reflection = DigiPayload_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HitPayload::kHitFieldNumber;
const int HitPayload::kBigBufferFieldNumber;
#endif  // !_MSC_VER

HitPayload::HitPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tuto7PayloadProto.HitPayload)
}

void HitPayload::InitAsDefaultInstance() {
}

HitPayload::HitPayload(const HitPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Tuto7PayloadProto.HitPayload)
}

void HitPayload::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bigbuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HitPayload::~HitPayload() {
  // @@protoc_insertion_point(destructor:Tuto7PayloadProto.HitPayload)
  SharedDtor();
}

void HitPayload::SharedDtor() {
  if (bigbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bigbuffer_;
  }
  if (this != default_instance_) {
  }
}

void HitPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HitPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HitPayload_descriptor_;
}

const HitPayload& HitPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Tuto7Payload_2eproto();
  return *default_instance_;
}

HitPayload* HitPayload::default_instance_ = NULL;

HitPayload* HitPayload::New() const {
  return new HitPayload;
}

void HitPayload::Clear() {
  if (has_bigbuffer()) {
    if (bigbuffer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      bigbuffer_->clear();
    }
  }
  hit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HitPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tuto7PayloadProto.HitPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Tuto7PayloadProto.Hit hit = 1;
      case 1: {
        if (tag == 10) {
         parse_hit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_hit;
        if (input->ExpectTag(18)) goto parse_bigBuffer;
        break;
      }

      // optional bytes bigBuffer = 2;
      case 2: {
        if (tag == 18) {
         parse_bigBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bigbuffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tuto7PayloadProto.HitPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tuto7PayloadProto.HitPayload)
  return false;
#undef DO_
}

void HitPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tuto7PayloadProto.HitPayload)
  // repeated .Tuto7PayloadProto.Hit hit = 1;
  for (int i = 0; i < this->hit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hit(i), output);
  }

  // optional bytes bigBuffer = 2;
  if (has_bigbuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bigbuffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Tuto7PayloadProto.HitPayload)
}

::google::protobuf::uint8* HitPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Tuto7PayloadProto.HitPayload)
  // repeated .Tuto7PayloadProto.Hit hit = 1;
  for (int i = 0; i < this->hit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hit(i), target);
  }

  // optional bytes bigBuffer = 2;
  if (has_bigbuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bigbuffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tuto7PayloadProto.HitPayload)
  return target;
}

int HitPayload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes bigBuffer = 2;
    if (has_bigbuffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bigbuffer());
    }

  }
  // repeated .Tuto7PayloadProto.Hit hit = 1;
  total_size += 1 * this->hit_size();
  for (int i = 0; i < this->hit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HitPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HitPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HitPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HitPayload::MergeFrom(const HitPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  hit_.MergeFrom(from.hit_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bigbuffer()) {
      set_bigbuffer(from.bigbuffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HitPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HitPayload::CopyFrom(const HitPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitPayload::IsInitialized() const {

  return true;
}

void HitPayload::Swap(HitPayload* other) {
  if (other != this) {
    hit_.Swap(&other->hit_);
    std::swap(bigbuffer_, other->bigbuffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HitPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HitPayload_descriptor_;
  metadata.reflection = HitPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Tuto7PayloadProto

// @@protoc_insertion_point(global_scope)
