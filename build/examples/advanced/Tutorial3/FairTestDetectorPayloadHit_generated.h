// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FAIRTESTDETECTORPAYLOADHIT_TESTDETECTORFLAT_H_
#define FLATBUFFERS_GENERATED_FAIRTESTDETECTORPAYLOADHIT_TESTDETECTORFLAT_H_

#include "flatbuffers/flatbuffers.h"


namespace TestDetectorFlat {

struct Hit;
struct HitPayload;

struct Hit FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DETID = 4,
    VT_MCINDEX = 6,
    VT_X = 8,
    VT_Y = 10,
    VT_Z = 12,
    VT_DX = 14,
    VT_DY = 16,
    VT_DZ = 18,
    VT_TIMESTAMP = 20,
    VT_TIMESTAMPERROR = 22
  };
  int32_t detID() const { return GetField<int32_t>(VT_DETID, 0); }
  int32_t mcIndex() const { return GetField<int32_t>(VT_MCINDEX, 0); }
  double x() const { return GetField<double>(VT_X, 0); }
  double y() const { return GetField<double>(VT_Y, 0); }
  double z() const { return GetField<double>(VT_Z, 0); }
  double dx() const { return GetField<double>(VT_DX, 0); }
  double dy() const { return GetField<double>(VT_DY, 0); }
  double dz() const { return GetField<double>(VT_DZ, 0); }
  double timestamp() const { return GetField<double>(VT_TIMESTAMP, 0); }
  double timestampError() const { return GetField<double>(VT_TIMESTAMPERROR, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DETID) &&
           VerifyField<int32_t>(verifier, VT_MCINDEX) &&
           VerifyField<double>(verifier, VT_X) &&
           VerifyField<double>(verifier, VT_Y) &&
           VerifyField<double>(verifier, VT_Z) &&
           VerifyField<double>(verifier, VT_DX) &&
           VerifyField<double>(verifier, VT_DY) &&
           VerifyField<double>(verifier, VT_DZ) &&
           VerifyField<double>(verifier, VT_TIMESTAMP) &&
           VerifyField<double>(verifier, VT_TIMESTAMPERROR) &&
           verifier.EndTable();
  }
};

struct HitBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_detID(int32_t detID) { fbb_.AddElement<int32_t>(Hit::VT_DETID, detID, 0); }
  void add_mcIndex(int32_t mcIndex) { fbb_.AddElement<int32_t>(Hit::VT_MCINDEX, mcIndex, 0); }
  void add_x(double x) { fbb_.AddElement<double>(Hit::VT_X, x, 0); }
  void add_y(double y) { fbb_.AddElement<double>(Hit::VT_Y, y, 0); }
  void add_z(double z) { fbb_.AddElement<double>(Hit::VT_Z, z, 0); }
  void add_dx(double dx) { fbb_.AddElement<double>(Hit::VT_DX, dx, 0); }
  void add_dy(double dy) { fbb_.AddElement<double>(Hit::VT_DY, dy, 0); }
  void add_dz(double dz) { fbb_.AddElement<double>(Hit::VT_DZ, dz, 0); }
  void add_timestamp(double timestamp) { fbb_.AddElement<double>(Hit::VT_TIMESTAMP, timestamp, 0); }
  void add_timestampError(double timestampError) { fbb_.AddElement<double>(Hit::VT_TIMESTAMPERROR, timestampError, 0); }
  HitBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HitBuilder &operator=(const HitBuilder &);
  flatbuffers::Offset<Hit> Finish() {
    auto o = flatbuffers::Offset<Hit>(fbb_.EndTable(start_, 10));
    return o;
  }
};

inline flatbuffers::Offset<Hit> CreateHit(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t detID = 0,
   int32_t mcIndex = 0,
   double x = 0,
   double y = 0,
   double z = 0,
   double dx = 0,
   double dy = 0,
   double dz = 0,
   double timestamp = 0,
   double timestampError = 0) {
  HitBuilder builder_(_fbb);
  builder_.add_timestampError(timestampError);
  builder_.add_timestamp(timestamp);
  builder_.add_dz(dz);
  builder_.add_dy(dy);
  builder_.add_dx(dx);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_mcIndex(mcIndex);
  builder_.add_detID(detID);
  return builder_.Finish();
}

struct HitPayload FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HITS = 4,
    VT_BIGBUFFER = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<Hit>> *hits() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Hit>> *>(VT_HITS); }
  const flatbuffers::Vector<uint8_t> *bigBuffer() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BIGBUFFER); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HITS) &&
           verifier.Verify(hits()) &&
           verifier.VerifyVectorOfTables(hits()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BIGBUFFER) &&
           verifier.Verify(bigBuffer()) &&
           verifier.EndTable();
  }
};

struct HitPayloadBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hits(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Hit>>> hits) { fbb_.AddOffset(HitPayload::VT_HITS, hits); }
  void add_bigBuffer(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bigBuffer) { fbb_.AddOffset(HitPayload::VT_BIGBUFFER, bigBuffer); }
  HitPayloadBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  HitPayloadBuilder &operator=(const HitPayloadBuilder &);
  flatbuffers::Offset<HitPayload> Finish() {
    auto o = flatbuffers::Offset<HitPayload>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<HitPayload> CreateHitPayload(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Hit>>> hits = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bigBuffer = 0) {
  HitPayloadBuilder builder_(_fbb);
  builder_.add_bigBuffer(bigBuffer);
  builder_.add_hits(hits);
  return builder_.Finish();
}

inline const TestDetectorFlat::HitPayload *GetHitPayload(const void *buf) { return flatbuffers::GetRoot<TestDetectorFlat::HitPayload>(buf); }

inline bool VerifyHitPayloadBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<TestDetectorFlat::HitPayload>(); }

inline void FinishHitPayloadBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<TestDetectorFlat::HitPayload> root) { fbb.Finish(root); }

}  // namespace TestDetectorFlat

#endif  // FLATBUFFERS_GENERATED_FAIRTESTDETECTORPAYLOADHIT_TESTDETECTORFLAT_H_
